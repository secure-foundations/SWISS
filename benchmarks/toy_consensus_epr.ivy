#lang ivy1.6

type value
type quorum
type node

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation voted(N:node)
relation vote(N:node, V:value)
relation decided(V:value)

init ~voted(N)
init ~vote(N, V)
init ~decided(V)

action cast_vote = {
  local n: node, v: value {
    assume ~voted(n);
    vote(n, v) := true;
    voted(n) := true;
  }
}

action decide = {
  local v: value, q: quorum {
    assume forall N . member(N,q) -> vote(N,v);
    decided(v) := true;
  }
}

export cast_vote
export decide

conjecture decided(V1) & decided(V2) -> V1 = V2

#conjecture vote(N,V) -> voted(N)
#conjecture vote(N, V1) & vote(N, V2) -> V1 = V2
#conjecture forall V. decided(V) -> exists Q. forall N. member(N, Q) -> vote(N, V)
