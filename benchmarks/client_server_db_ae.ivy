#lang ivy1.6

type db_request_id
type node
type response
type request

relation match(R:request, Q:response)

relation request_sent(N:node, R:request)
relation response_sent(N:node, R:response)
relation response_received(N:node, R:response)

relation db_request_sent(I:db_request_id, R:request)
relation db_response_sent(I:db_request_id, R:response)

relation t(I:db_request_id, N:node)

init ~request_sent(N,R)
init ~response_sent(N,P)
init ~response_received(N,P)
init ~db_request_sent(I, R)
init ~db_response_sent(I,P)
init ~t(I,N)

action new_request = {
  local n:node, r:request {
    request_sent(n,r) := true;
  }
}

action server_process_request = {
  local n:node, r:request, i:db_request_id {
    assume (request_sent(n,r));
    assume (forall N. ~(t(i,N)));
    t(i,n) := true;
    db_request_sent(i,r) := true;
  }
}

action db_process_request = {
  local i:db_request_id, r:request, p:response {
    assume (db_request_sent(i,r));
    assume (match(r,p));
    db_response_sent(i, p) := true;
  }
}

action server_process_db_response = {
  local n:node, i:db_request_id, p:response {
    assume (db_response_sent(i,p));
    assume (t(i,n));
    response_sent(n, p) := true;
  }
}

action receive_response = {
  local n:node, p:response {
    assume (response_sent(n,p));
    response_received(n, p) := true;
  }
}

export new_request
export server_process_request
export db_process_request
export server_process_db_response
export receive_response

conjecture forall N,P. response_received(N,P) -> exists R. request_sent(N,R) & match(R,P)
#conjecture forall N,P. response_sent(N,P) -> exists R. request_sent(N,R) & match(R,P)
#conjecture forall I,R. db_request_sent(I,R) -> exists N. t(I,N) & request_sent(N,R)
#conjecture forall I,P. db_response_sent(I,P) -> exists R. db_request_sent(I,R) & match(R,P)
#conjecture t(I,N1) & t(I,N2) -> N1 = N2
