#lang ivy1.6

# from Paxos Made EPR

################################################################################
#
# Modules that should probably come from a standard library
#
################################################################################

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type round
type value
type quorum
type node

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation member(N:node, Q:quorum)
axiom forall Q1:quorum, Q2:quorum. exists N:node. member(N, Q1) & member(N, Q2)

relation one_a(R:round)
relation one_b_max_vote(N:node, R1:round, R2:round, V:value)
relation one_b(N:node, R:round) # := exists RMAX, V. one_b_max_vote(N,R,RMAX,V)
relation left_rnd(N:node, R:round) # := exists R2, RMAX, V. ~le(R2,R) & one_b_max_vote(N,R,RMAX,V)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b
relation decision(N:node, R:round, V:value) # got 2b from a quorum

init ~one_a(R)
init ~one_b_max_vote(N,R1,R2,V)
init ~one_b(N,R)
init ~left_rnd(N,R)
init ~proposal(R,V)
init ~vote(N,R,V)
init ~decision(N,R,V)

action send_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    local r:round {
        assume r ~= none;
        one_a(r) := true
    }
}


action join_round = {
    # receive 1a and answer with 1b
    local n:node, r:round {
        assume r ~= none;
        assume one_a(r);
        assume ~left_rnd(n,r);

        local maxr:round, v:value {
            # find the maximal vote in a round less than r
            assume ((maxr = none & forall MAXR:round,V:value. ~(~le(r,MAXR) & vote(n,MAXR,V))) |
                    (maxr ~= none & ~le(r,maxr) & vote(n,maxr,v) &
                    (forall MAXR:round,V:value. (~le(r,MAXR) & vote(n,MAXR,V)) -> le(MAXR,maxr))
                   ));
            # send the 1b message
            one_b_max_vote(n,r,maxr,v) := true;
            one_b(n,r) := true;
            left_rnd(n,R) := left_rnd(n,R) | ~le(r,R)
        }
    }
}



action propose = {
    # receive a quorum of 1b's and send a 2a (proposal)
    local r:round, q:quorum {
        assume r ~= none;
        assume ~proposal(r,V);
        assume forall N:node. member(N, q) -> one_b(N,r);

        local maxr:round, v:value {
            # find the maximal max_vote in the quorum
            assume ((maxr = none & forall N:node,MAXR:round,V:value. ~(member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V))) |
                    (maxr ~= none &
                    (exists N:node. member(N, q) & ~le(r,maxr) & vote(N,maxr,v)) &
                    (forall N:node,MAXR:round,V:value. (member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr))
                   ));
            # propose value v
            proposal(r, v) := true
        }
    }
}

action cast_vote = {
    # receive a 2a and send 2b
    local n:node, v:value, r:round {
        assume r ~= none;
        assume ~left_rnd(n,r);
        assume proposal(r, v);
        vote(n, r, v) := true
    }
}

action decide = {
    # get 2b from a quorum
    local n:node, r:round, v:value, q:quorum {
        assume r ~= none;
        assume member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }
}

export send_1a
export join_round
export propose
export cast_vote
export decide

# safety property:
conjecture (
    decision(N1,R1,V1) &
    decision(N2,R2,V2)
) -> V1 = V2

template (forall A:node . forall C:value . forall D:value . forall Q:quorum . forall R1:round . forall R2:round . forall R3:round . WILD)

template (forall R:round, V:value. exists Q:quorum. forall M1:node, M2:node. WILD)

template (forall R1:round, R2:round, V1:value, V2:value, Q:quorum. exists N:node. WILD)

template (forall R1:round, R2:round, R3:round, V1:value, V2:value, Q:quorum. exists M:node. exists N:node. WILD)

template (forall R1:round, R2:round, V:value. exists Q:quorum. forall M:node. WILD)

