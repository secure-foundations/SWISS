#lang ivy1.6

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

init ~table(N, K, V)
init ~transfer_msg(N, K, V)
init owner(N1, K) & owner(N2, K) -> N1 = N2
init forall K. exists N. owner(N, K)

action reshard = {
  local k: key, v: value, n_old: node, n_new: node {
    assume (table(n_old, k, v));
    table(n_old,k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
  }
}


action recv_transfer_msg = {
  local n: node, k: key, v: value {
    assume (transfer_msg(n, k, v));
    transfer_msg(n,k,v) := false;
    table(n,k,v) := true;
    owner(n,k) := true;
  }
}

action put = {
  local n: node, k: key, v: value {
    assume (owner(n, k));
    table(n, k, V) := (V = v);
  }
}

export reshard
export recv_transfer_msg
export put

conjecture (exists N,K,V. transfer_msg(N,K,V)) | (forall K. exists N. owner(N,K))

#conjecture forall K. (exists N. owner(N, K)) | (exists N, V. transfer_msg(N, K, V))
