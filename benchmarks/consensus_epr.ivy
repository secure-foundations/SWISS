#lang ivy1.6

type value
type quorum
type node

relation member(N:node, Q:quorum)
axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)

relation vote_request_msg(N:node, M:node)
relation voted(N:node)
relation vote_msg(N:node, M:node)
relation votes(N:node, M:node)
relation leader(N:node)
relation decided(N:node, V:value)

init ~vote_request_msg(N1, N2)
init ~voted(N)
init ~vote_msg(N1, N2)
init ~votes(N1, N2)
init ~leader(N1)
init ~decided(N, V)

action send_request_vote = { 
  local src: node, dst: node {
    vote_request_msg(src, dst) := true;
  }
}

action send_vote = {
  local src: node, dst: node {
    assume ((~voted(src)) & ((vote_request_msg(dst, src))));
    vote_msg(src, dst) := true;
    voted(src) := true;
  }
}

action send_vote_mark_false = {
  local src: node, dst: node {
    assume ((~voted(src)) & ((vote_request_msg(dst, src))));
    vote_msg(src, dst) := true;
    voted(src) := true;
    vote_request_msg(dst, src) := false;
  }
}

action recv_vote = {
  local n: node, sender: node {
    assume (vote_msg(sender, n));
    votes(n, sender) := true;
  }
}

action become_leader = {
  local n: node, q: quorum {
    assume (member(N, q) -> (votes(n, N)));
    leader(n) := true;
  }
}

action decide = {
  local n: node, v: value {
    assume ((leader(n)) & ~(decided(n, V)));
    decided(n, v) := true;
  }
}

export send_request_vote
export send_vote
export send_vote_mark_false
export recv_vote
export become_leader
export decide

conjecture decided(N1, V1) & decided(N2, V2) -> V1 = V2

#conjecture leader(N1) & leader(N2) -> N1 = N2
#conjecture votes(N, N1) -> vote_msg(N1, N)
#conjecture vote_msg(N, N1) & vote_msg(N, N2) -> N1 = N2
#conjecture vote_msg(N, N1) -> voted(N)
#conjecture exists Q. forall N, M. leader(N) & member(M, Q) -> votes(N, M)
#conjecture decided(N, V) -> leader(N)
