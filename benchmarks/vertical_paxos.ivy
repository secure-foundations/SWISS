#lang ivy1.6

# from Paxos Made EPR

################################################################################
#
# Module for axiomatizing a total order
#
################################################################################

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

type round
type value
type quorum
type config
type node

individual none: value

relation le(X:round, Y:round)
instantiate total_order(le)

relation member(N:node, Q:quorum)
relation quorumin(Q:quorum, C:config)
axiom forall C:config, Q1:quorum, Q2:quorum. quorumin(Q1,C) & quorumin(Q2,C) -> exists N:node. member(N, Q1) & member(N, Q2)

relation one_a(R1:round,R2:round)
relation join_ack_msg(N:node, R1:round, R2:round, V:value)
relation left_rnd(N:node, R:round)
relation proposal(R:round, V:value) # 2a
relation vote(N:node, R:round, V:value) # 2b
relation decision(N:node, R:round, V:value) # got 2b from a quorum
relation configure_round_msg(R:round, C:config)
relation complete_msg(R:round) # message to the master that R is complete

relation complete_of(C:config, R:round) # replaced the function
axiom complete_of(C,R1) & complete_of(C,R2) -> R1 = R2 # immutable, so we can use axiom

# highest complete round known to the master (master state)
individual master_complete:round

init ~one_a(R1,R2)
init ~join_ack_msg(N,R1,R2,V)
init ~left_rnd(N,R)
init ~proposal(R,V)
init ~vote(N,R,V)
init ~decision(N,R,V)
init ~configure_round_msg(R,C)
init ~complete_msg(R)
init le(master_complete,R)

# master actions

action configure_round = {
  local r:round, c:config {
    assume ~configure_round_msg(r,C); # r isn't configured
    assume le(master_complete, r);
    assume complete_of(c,master_complete);
    configure_round_msg(r,c) := true
  }
}

action mark_complete = {
  local r:round {
    assume complete_msg(r);
    if ~le(r,master_complete) {
        master_complete := r
    }
  }
}

# nodes actions

action send_1a = {
    # a proposer selects a round r and sends a message asking nodes to join the round to all rounds strictly lower than r and higher than the complete round associated to c
    local r:round, c:config, cr:round {
        assume configure_round_msg(r,c);
        assume complete_of(c,cr);
        one_a(r,R) := one_a(r,R) | (le(cr,R) & ~le(r,R))
    }
}

action join_round = {
    # receive 1a and answer with 1b
    local n:node, r:round, rp:round {
        assume one_a(r,rp);
        assume ~left_rnd(n,r);

        local v:value {
            if (forall V:value . ~vote(n,rp,V)) {
                join_ack_msg(n,r,rp,none) := true;
            } else {
                assume vote(n,rp,v);
                join_ack_msg(n,r,rp,v) := true;
            };
            # update derived relations
            left_rnd(n,R) := left_rnd(n,R) | ~le(r,R)
        }
    }
}

function quorum_of_round(R:round) : quorum # local to propose
action propose = {
    local r:round, c:config, cr:round {
        quorum_of_round(R) := *;
        assume configure_round_msg(r,c);
        assume complete_of(c,cr);
        assume ~proposal(r,V);
        assume le(cr,R) & ~le(r,R) -> exists C. configure_round_msg(R,C); # relevant rounds must be configured
        assume le(cr,R) & ~le(r,R) & configure_round_msg(R,C) -> quorumin(quorum_of_round(R),C); # quorum_of_round is in the right configs
        assume le(cr,R) & ~le(r,R) & member(N, quorum_of_round(R)) -> exists V:value. join_ack_msg(N,r,R,V); # got messages from all quorums between cr and r

        local maxr:round, v:value {
            # find the maximal maximal vote in the quorums
            # maxr, v = max { (r',v') | exists N. le(cr,r') & ~le(r,r') & member(N, quorum_of_round(r')) & join_ack_msg(N,r,r',v') & v' ~= none}
            assume ((v = none & forall N:node,MAXR:round,V:value.
                     ~(le(cr,MAXR) & ~le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V ~= none)) |
                    (v ~= none &
                    (exists N:node. le(cr,maxr) & ~le(r,maxr) & member(N, quorum_of_round(maxr)) & join_ack_msg(N,r,maxr,v) & v ~= none) &
                    (forall N:node,MAXR:round,V:value.
                     (le(cr,MAXR) & ~le(r,MAXR) & member(N, quorum_of_round(MAXR)) & join_ack_msg(N,r,MAXR,V) & V ~= none) -> le(MAXR,maxr))
                   ));
            if v = none {
                local w:value {
                  assume w ~= none;
                  complete_msg(r) := true; # notify master in case r is complete
                  proposal(r, w) := true;
                }
            } else {
              # propose value v
              proposal(r, v) := true
            };
        }
    }
}

action cast_vote = {
    # receive a 2a and send a 2b
    local n:node, v:value, r:round {
        assume v ~= none;
        assume ~left_rnd(n,r);
        assume proposal(r, v);
        vote(n, r, v) := true
    }
}

action decide = {
    # get 2b from a quorum
    local n:node, r:round, c:config, v:value, q:quorum {
        assume v ~= none;
        assume configure_round_msg(r,c);
        assume quorumin(q,c);
        assume member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true;
        complete_msg(r) := true
    }
}

export configure_round
export mark_complete
export send_1a
export join_round
export propose
export cast_vote
export decide

# safety property:
conjecture (
    decision(N1,R1,V1) &
    decision(N2,R2,V2)
) -> V1 = V2

# proposals are unique per round
#conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

# configurations are unique per round
#conjecture configure_round_msg(R,C1) & configure_round_msg(R,C2) -> C1 = C2

# properties of one_a
#conjecture one_a(R,RP) -> ~le(R,RP)
#conjecture one_a(R,RP) -> exists C. configure_round_msg(R,C)
#conjecture one_a(R,RP) & configure_round_msg(R,C) & complete_of(C,MINREL)-> le(MINREL,RP)

# only vote for proposed values
#conjecture vote(N,R,V) -> proposal(R,V)

# only propose for rounds if all lower rounds so far are configured
#conjecture proposal(R2,V) & le(R1,R2) -> exists C. configure_round_msg(R1,C)

# master_complete or complete_of rounds are either zero or complete_msg holds for them
#conjecture (R2 = master_complete | (configure_round_msg(R3,C) & complete_of(C,R2))) & ~le(R2,R1) -> complete_msg(R2)
# rounds in complete_msg have all prior rounds configured
#conjecture complete_msg(R2) & le(R1,R2) -> exists C. configure_round_msg(R1,C)

# decisions come from configured rounds with  a quorum of votes:
#conjecture forall R:round, V:value. (exists N:node. decision(N,R,V)) -> exists C:config, Q:quorum. configure_round_msg(R,C) & quorumin(Q,C) & (forall N:node. member(N, Q) -> vote(N,R,V))

# properties of choosable and proposal
#conjecture forall R1:round, R2:round, V1:value, V2:value, Q:quorum, C:config.
#    ~le(R2,R1) & proposal(R2,V2) & V1 ~= V2 & configure_round_msg(R1,C) & quorumin(Q,C) ->
#    (exists N:node. member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1))

# properties of configure_round messages
#conjecture configure_round_msg(R,C) & complete_of(C,MINREL) -> le(MINREL,R) & le(MINREL, master_complete)

# complete, choosable, decision
#conjecture complete_msg(RR) & ~le(RR,R) & configure_round_msg(R,C) & quorumin(Q,C) &
#           ~(exists N:node. member(N,Q) & left_rnd(N,R) & ~vote(N,R,V))
#           -> (exists N:node. decision(N,RR,V))

# properties of none
#conjecture ~proposal(R,none)
#conjecture ~vote(N,R,none)
#conjecture ~decision(N,R,none)

# properties of join_ack_msg
#conjecture join_ack_msg(N,R,RP,V) -> one_a(R,RP)
#conjecture join_ack_msg(N,R,RP,none) -> ~vote(N,RP,V)
#conjecture join_ack_msg(N,R,RP,V) & V ~= none -> vote(N,RP,V)

# properties of left_rnd
#conjecture join_ack_msg(N,R2,RP,V) & ~le(R2,R1) -> left_rnd(N,R1)


template (forall A:node . forall C:value . forall D:value . forall Q:quorum . forall R1:round . forall R2:round . forall R3:round . forall CO:config . WILD)
template (forall R1:round, R2:round, V:value . exists CO:config . WILD)
template (forall R:round, V:value. exists Q:quorum. exists CO:config . forall M1:node, M2:node. WILD)
template (forall R1:round, R2:round, V1:value, V2:value, Q:quorum, CO:config . exists N:node. WILD)
